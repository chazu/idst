(start-world nim)
(create board name number-stones)
(create player name play-board opponent turn)
(make board nim-board 9)
(make player player1 nim-board player2 yes)
(make player player2 nim-board player1 no)
(qualify player status won is player turn = no and player play-board number-stones = 0)
(qualify player mood happy is not player opponent status = won) 
(rel-qualify playerA happier playerB is playerA mood = happy and playerB mood = sad)
(rel-qualify playerA as-happy-as playerB is playerA status = playerB status)
(action player take number-take-stones 
	consequence player play-board number-stones = 
	       	    	   player play-board number-stones - number-take-stones and
		    player turn = no and
		    player opponent turn = yes)
(english action player take number-take-stones 
	 means player takes number-take-stones stones
	 consequence there will be (player play-board number-stones - number-take-stones)
	 	     	   stones left and
		     it is now (player opponent) turn)
(rule player take is player turn = yes)
(english rule player take is it should be player turn)
(rule player take is number-take-stones in "{ 1 2 }")
(english rule player take is player can only take 1 or 2 stones)
(rule player take is number-take-stones <= player play-board number-stones)
(english rule player take is player cannot take more stones than left on the board)
(/ goal player win when is yes
      	     	 requires
		 try
		 consequence)
(player1 take 1)

(/ comment...)
(/ nim-board number-stones)
(/ player1 take 2)
(/ player2 take 2)
(/ player1 take 2)
(/ player2 take 2)
(/ player1 take 2)
(/ player2 take 2)
(/ nim-board number-stones)
(/ player1 take 5)
(/ nim-board number-stones)
(/ player1 take 2)
(/ nim-board number-stones)
(/ player1 take 2)
(/ nim-board number-stones)
(/ player1 take 2)
(/ nim-board number-stones)
(/ player1 take 2)
(/ nim-board number-stones)
(/ player1 take 2)
(/ nim-board number-stones)
(/ player1 take 5)
(/ nim-board number-stones)
(/ list object)
(/ list player instance)
(/ list player property)
(/ list player qualification)
(/ list player2)
(/ list nim-board)
(/ player2 opponent)
(/ player2 status)
(/ player2 blah)
(/ player1 opponent opponent opponent)
(/ nim-board number-stones - 1 + 3)
(/ 1 + 2 + 3 + 4 / 5)
(/ 1 + nim-board number-stones * 10)
(/ nim-board number-stones + nim-board number-stones - 18)
(/ player1 turn)
(/ player1 opponent opponent opponent)
(/ player1 turn)
(/ player1 name)
(/ is nim-board number-stones = 8)
(/ is nim-board number-stones in "{ 8 0 19 9 }")
(/ is NIM-BOARD NUMBER-STONES IN "{ 2 3 4 5 6 7 8 9 }" AND 2 IN "{ 1 2 }") 
(/ is 1 in "{ 1 2 }")
(/ is 1 in "{ 11 -1 }")
(/ is player1 turn = yes)
(/ is player2 turn = yes)
(/ is player1 turn = player2 turn)
(/ is player1 opponent turn = yes)
(/ is player2 opponent turn = yes)
(/ is player2 opponent opponent turn = yes)
(/ is player1 opponent opponent turn = yes)
(/ is player2 opponent turn = player1 opponent turn)
(/ is not player2 opponent turn = player1 opponent turn)
(/ is not not not player1 turn = yes)
(/ is not player2 turn = yes)
(/ is not player1 turn = player2 turn)
(/ is player1 turn = player1 turn)
(/ is not player1 turn = player1 turn)
(/ is nim-board number-stones = 9 or nim-board number-stones = 7)
(/ is nim-board number-stones = 2 or nim-board number-stones = 7)
(/ is nim-board number-stones = 8 and nim-board number-stones = 9)
(/ is nim-board number-stones = 9 and nim-board number-stones = 9 and player1 turn = yes)
(/ is nim-board number-stones = 9 and nim-board number-stones = 9 and player1 turn = no)
(/ is not player1 turn = yes and nim-board number-stones = 0)
(/ is not player1 turn = yes or nim-board number-stones = 0)
(/ is not player2 turn = yes or nim-board number-stones = 0)
(/ is player2 turn = no and nim-board number-stones = 0)
(/ player1 status)
(/ player2 status)
(/ player1 mood)
(/ player2 mood)
(/ player1 opponent status)
(/ player2 opponent status)
(/ player2 opponent opponent status)
(/ is player1 as-happy-as player2)
(/ is player1 happier player2)
(/ player1 take 2)
(/ player2 take 2)
(/ player1 take 2)
(/ player2 take 2)
(/ player1 take 1)
(/ is player1 as-happy-as player2)
(/ is player1 happier player2)
(/ list soracle)
(end-file)





