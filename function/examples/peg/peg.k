;;; this file was generated automatically -- EDIT AT YOUR OWN RISK
;;; 
;;; from yy-compile.k, last edited: 2007-05-20 12:00:52 by piumarta on emilia

(require 'yy)

(define yy__end-of-line 0)
(define yy__comment 0)
(define yy__space 0)
(define yy__range 0)
(define yy__char 0)
(define yy__END 0)
(define yy__BEGIN 0)
(define yy__DOT 0)
(define yy__class 0)
(define yy__literal 0)
(define yy__CLOSE 0)
(define yy__OPEN 0)
(define yy__COLON 0)
(define yy__PLUS 0)
(define yy__STAR 0)
(define yy__QUESTION 0)
(define yy__primary 0)
(define yy__NOT 0)
(define yy__suffix 0)
(define yy__action 0)
(define yy__AND 0)
(define yy__prefix 0)
(define yy__BAR 0)
(define yy__sequence 0)
(define yy__SEMICOLON 0)
(define yy__expression 0)
(define yy__EQUAL 0)
(define yy__identifier 0)
(define yy__definition 0)
(define yy__- 0)
(define yy__grammar 0)
(define yy_2_lval (lambda () '(- (+ (yy-svals yy) (yy-svalpos yy)) 8)))
(define yy_2_rval (lambda () '(long@ (+ (yy-svals yy) (yy-svalpos yy)) -2)))
(define yy_1_lval (lambda () '(- (+ (yy-svals yy) (yy-svalpos yy)) 4)))
(define yy_1_rval (lambda () '(long@ (+ (yy-svals yy) (yy-svalpos yy)) -1)))

;; end-of-line
(define yy__end-of-line
  (lambda (yy)
    (let ((yypos0 (yy-pos yy)) (yythunkpos0 (yy-thunkpos yy)))
      (let ((yypos2 (yy-pos yy)) (yythunkpos2 (yy-thunkpos yy)))
        (if (not (yyMatchString yy "\r\n")) (goto 3))
        (goto 2)
        (label 3)
        (set (yy-pos yy) yypos2) (set (yy-thunkpos yy) yythunkpos2)
        (if (not (yyMatchChar yy $\n)) (goto 4))
        (goto 2)
        (label 4)
        (set (yy-pos yy) yypos2) (set (yy-thunkpos yy) yythunkpos2)
        (if (not (yyMatchChar yy $\r)) (goto 1))
      )
      (label 2)
      (return 1)
      (label 1)
      (set (yy-pos yy) yypos0) (set (yy-thunkpos yy) yythunkpos0)
      (return 0)
    )
  )
)

;; comment
(define yy__comment
  (lambda (yy)
    (let ((yypos0 (yy-pos yy)) (yythunkpos0 (yy-thunkpos yy)))
      (if (not (yyMatchChar yy $;)) (goto 5))
      (label 6)
      (let ((yypos7 (yy-pos yy)) (yythunkpos7 (yy-thunkpos yy)))
        (let ((yypos8 (yy-pos yy)) (yythunkpos8 (yy-thunkpos yy)))
          (if (not (yy__end-of-line yy)) (goto 8))
          (goto 7)
          (label 8)
          (set (yy-pos yy) yypos8) (set (yy-thunkpos yy) yythunkpos8)
        )
        (if (not (yyMatchDot yy)) (goto 7))
        (goto 6)
        (label 7)
        (set (yy-pos yy) yypos7) (set (yy-thunkpos yy) yythunkpos7)
      )
      (if (not (yy__end-of-line yy)) (goto 5))
      (return 1)
      (label 5)
      (set (yy-pos yy) yypos0) (set (yy-thunkpos yy) yythunkpos0)
      (return 0)
    )
  )
)

;; space
(define yy__space
  (lambda (yy)
    (let ((yypos0 (yy-pos yy)) (yythunkpos0 (yy-thunkpos yy)))
      (let ((yypos10 (yy-pos yy)) (yythunkpos10 (yy-thunkpos yy)))
        (if (not (yyMatchChar yy $ )) (goto 11))
        (goto 10)
        (label 11)
        (set (yy-pos yy) yypos10) (set (yy-thunkpos yy) yythunkpos10)
        (if (not (yyMatchChar yy $\t)) (goto 12))
        (goto 10)
        (label 12)
        (set (yy-pos yy) yypos10) (set (yy-thunkpos yy) yythunkpos10)
        (if (not (yy__end-of-line yy)) (goto 9))
      )
      (label 10)
      (return 1)
      (label 9)
      (set (yy-pos yy) yypos0) (set (yy-thunkpos yy) yythunkpos0)
      (return 0)
    )
  )
)

;; range
(define yy__range
  (lambda (yy)
    (let ((yypos0 (yy-pos yy)) (yythunkpos0 (yy-thunkpos yy)))
      (let ((yypos14 (yy-pos yy)) (yythunkpos14 (yy-thunkpos yy)))
        (if (not (yy__char yy)) (goto 15))
        (if (not (yyMatchChar yy $-)) (goto 15))
        (if (not (yy__char yy)) (goto 15))
        (goto 14)
        (label 15)
        (set (yy-pos yy) yypos14) (set (yy-thunkpos yy) yythunkpos14)
        (if (not (yy__char yy)) (goto 13))
      )
      (label 14)
      (return 1)
      (label 13)
      (set (yy-pos yy) yypos0) (set (yy-thunkpos yy) yythunkpos0)
      (return 0)
    )
  )
)

;; char
(define yy__char
  (lambda (yy)
    (let ((yypos0 (yy-pos yy)) (yythunkpos0 (yy-thunkpos yy)))
      (let ((yypos17 (yy-pos yy)) (yythunkpos17 (yy-thunkpos yy)))
        (if (not (yyMatchChar yy $\\)) (goto 18))
        (if (not (yyMatchClass yy "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\1\0\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\1\1\1\0\0\0\1\1\0\0\1\1\0\0\0\0\0\0\0\1\0\0\0\1\0\1\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0")) (goto 18))
        (goto 17)
        (label 18)
        (set (yy-pos yy) yypos17) (set (yy-thunkpos yy) yythunkpos17)
        (if (not (yyMatchChar yy $\\)) (goto 19))
        (if (not (yyMatchClass yygoto 19))
        (if (not (yyMatchClass yygoto 19))
        (if (not (yyMatchClass yygoto 19))
        (goto 17)
        (label 19)
        (set (yy-pos yy) yypos17) (set (yy-thunkpos yy) yythunkpos17)
        (if (not (yyMatchChar yy $\\)) (goto 20))
        (if (not (yyMatchClass yy "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0")) (goto 20))
        (let ((yypos21 (yy-pos yy)) (yythunkpos21 (yy-thunkpos yy)))
          (if (not (yyMatchClass yygoto 21))
          (goto 22)
          (label 21)
          (set (yy-pos yy) yypos21) (set (yy-thunkpos yy) yythunkpos21)
        )
        (label 22)
        (goto 17)
        (label 20)
        (set (yy-pos yy) yypos17) (set (yy-thunkpos yy) yythunkpos17)
        (let ((yypos23 (yy-pos yy)) (yythunkpos23 (yy-thunkpos yy)))
          (if (not (yyMatchChar yy $\\)) (goto 23))
          (goto 16)
          (label 23)
          (set (yy-pos yy) yypos23) (set (yy-thunkpos yy) yythunkpos23)
        )
        (if (not (yyMatchDot yy)) (goto 16))
      )
      (label 17)
      (return 1)
      (label 16)
      (set (yy-pos yy) yypos0) (set (yy-thunkpos yy) yythunkpos0)
      (return 0)
    )
  )
)

;; END
(define yy__END
  (lambda (yy)
    (let ((yypos0 (yy-pos yy)) (yythunkpos0 (yy-thunkpos yy)))
      (if (not (yyMatchChar yy $>)) (goto 24))
      (if (not (yy__- yy)) (goto 24))
      (return 1)
      (label 24)
      (set (yy-pos yy) yypos0) (set (yy-thunkpos yy) yythunkpos0)
      (return 0)
    )
  )
)

;; BEGIN
(define yy__BEGIN
  (lambda (yy)
    (let ((yypos0 (yy-pos yy)) (yythunkpos0 (yy-thunkpos yy)))
      (if (not (yyMatchChar yy $<)) (goto 25))
      (if (not (yy__- yy)) (goto 25))
      (return 1)
      (label 25)
      (set (yy-pos yy) yypos0) (set (yy-thunkpos yy) yythunkpos0)
      (return 0)
    )
  )
)

;; DOT
(define yy__DOT
  (lambda (yy)
    (let ((yypos0 (yy-pos yy)) (yythunkpos0 (yy-thunkpos yy)))
      (if (not (yyMatchChar yy $.)) (goto 26))
      (if (not (yy__- yy)) (goto 26))
      (return 1)
      (label 26)
      (set (yy-pos yy) yypos0) (set (yy-thunkpos yy) yythunkpos0)
      (return 0)
    )
  )
)

;; class
(define yy__class
  (lambda (yy)
    (let ((yypos0 (yy-pos yy)) (yythunkpos0 (yy-thunkpos yy)))
      (if (not (yyMatchChar yy $[)) (goto 27))
      (if (not (let ((yyleng (yy-makeText yy (yy-begin yy) (yy-end yy))) (yytext (yy-text yy))) (yyStart yy))) (goto 27))
      (label 28)
      (let ((yypos29 (yy-pos yy)) (yythunkpos29 (yy-thunkpos yy)))
        (let ((yypos30 (yy-pos yy)) (yythunkpos30 (yy-thunkpos yy)))
          (if (not (yyMatchChar yy $])) (goto 30))
          (goto 29)
          (label 30)
          (set (yy-pos yy) yypos30) (set (yy-thunkpos yy) yythunkpos30)
        )
        (if (not (yy__range yy)) (goto 29))
        (goto 28)
        (label 29)
        (set (yy-pos yy) yypos29) (set (yy-thunkpos yy) yythunkpos29)
      )
      (if (not (let ((yyleng (yy-makeText yy (yy-begin yy) (yy-end yy))) (yytext (yy-text yy))) (yyStop yy))) (goto 27))
      (if (not (yyMatchChar yy $])) (goto 27))
      (if (not (yy__- yy)) (goto 27))
      (return 1)
      (label 27)
      (set (yy-pos yy) yypos0) (set (yy-thunkpos yy) yythunkpos0)
      (return 0)
    )
  )
)

;; literal
(define yy__literal
  (lambda (yy)
    (let ((yypos0 (yy-pos yy)) (yythunkpos0 (yy-thunkpos yy)))
      (let ((yypos32 (yy-pos yy)) (yythunkpos32 (yy-thunkpos yy)))
        (if (not (yyMatchClass yy "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0")) (goto 33))
        (if (not (let ((yyleng (yy-makeText yy (yy-begin yy) (yy-end yy))) (yytext (yy-text yy))) (yyStart yy))) (goto 33))
        (label 34)
        (let ((yypos35 (yy-pos yy)) (yythunkpos35 (yy-thunkpos yy)))
          (let ((yypos36 (yy-pos yy)) (yythunkpos36 (yy-thunkpos yy)))
            (if (not (yyMatchClass yygoto 36))
            (goto 35)
            (label 36)
            (set (yy-pos yy) yypos36) (set (yy-thunkpos yy) yythunkpos36)
          )
          (if (not (yy__char yy)) (goto 35))
          (goto 34)
          (label 35)
          (set (yy-pos yy) yypos35) (set (yy-thunkpos yy) yythunkpos35)
        )
        (if (not (let ((yyleng (yy-makeText yy (yy-begin yy) (yy-end yy))) (yytext (yy-text yy))) (yyStop yy))) (goto 33))
        (if (not (yyMatchClass yygoto 33))
        (if (not (yy__- yy)) (goto 33))
        (goto 32)
        (label 33)
        (set (yy-pos yy) yypos32) (set (yy-thunkpos yy) yythunkpos32)
        (if (not (yyMatchClass yygoto 31))
        (if (not (let ((yyleng (yy-makeText yy (yy-begin yy) (yy-end yy))) (yytext (yy-text yy))) (yyStart yy))) (goto 31))
        (label 37)
        (let ((yypos38 (yy-pos yy)) (yythunkpos38 (yy-thunkpos yy)))
          (let ((yypos39 (yy-pos yy)) (yythunkpos39 (yy-thunkpos yy)))
            (if (not (yyMatchClass yygoto 39))
            (goto 38)
            (label 39)
            (set (yy-pos yy) yypos39) (set (yy-thunkpos yy) yythunkpos39)
          )
          (if (not (yy__char yy)) (goto 38))
          (goto 37)
          (label 38)
          (set (yy-pos yy) yypos38) (set (yy-thunkpos yy) yythunkpos38)
        )
        (if (not (let ((yyleng (yy-makeText yy (yy-begin yy) (yy-end yy))) (yytext (yy-text yy))) (yyStop yy))) (goto 31))
        (if (not (yyMatchClass yygoto 31))
        (if (not (yy__- yy)) (goto 31))
      )
      (label 32)
      (return 1)
      (label 31)
      (set (yy-pos yy) yypos0) (set (yy-thunkpos yy) yythunkpos0)
      (return 0)
    )
  )
)

;; CLOSE
(define yy__CLOSE
  (lambda (yy)
    (let ((yypos0 (yy-pos yy)) (yythunkpos0 (yy-thunkpos yy)))
      (if (not (yyMatchChar yy $))) (goto 40))
      (if (not (yy__- yy)) (goto 40))
      (return 1)
      (label 40)
      (set (yy-pos yy) yypos0) (set (yy-thunkpos yy) yythunkpos0)
      (return 0)
    )
  )
)

;; OPEN
(define yy__OPEN
  (lambda (yy)
    (let ((yypos0 (yy-pos yy)) (yythunkpos0 (yy-thunkpos yy)))
      (if (not (yyMatchChar yy $()) (goto 41))
      (if (not (yy__- yy)) (goto 41))
      (return 1)
      (label 41)
      (set (yy-pos yy) yypos0) (set (yy-thunkpos yy) yythunkpos0)
      (return 0)
    )
  )
)

;; COLON
(define yy__COLON
  (lambda (yy)
    (let ((yypos0 (yy-pos yy)) (yythunkpos0 (yy-thunkpos yy)))
      (if (not (yyMatchChar yy $:)) (goto 42))
      (if (not (yy__- yy)) (goto 42))
      (return 1)
      (label 42)
      (set (yy-pos yy) yypos0) (set (yy-thunkpos yy) yythunkpos0)
      (return 0)
    )
  )
)

;; PLUS
(define yy__PLUS
  (lambda (yy)
    (let ((yypos0 (yy-pos yy)) (yythunkpos0 (yy-thunkpos yy)))
      (if (not (yyMatchChar yy $+)) (goto 43))
      (if (not (yy__- yy)) (goto 43))
      (return 1)
      (label 43)
      (set (yy-pos yy) yypos0) (set (yy-thunkpos yy) yythunkpos0)
      (return 0)
    )
  )
)

;; STAR
(define yy__STAR
  (lambda (yy)
    (let ((yypos0 (yy-pos yy)) (yythunkpos0 (yy-thunkpos yy)))
      (if (not (yyMatchChar yy $*)) (goto 44))
      (if (not (yy__- yy)) (goto 44))
      (return 1)
      (label 44)
      (set (yy-pos yy) yypos0) (set (yy-thunkpos yy) yythunkpos0)
      (return 0)
    )
  )
)

;; QUESTION
(define yy__QUESTION
  (lambda (yy)
    (let ((yypos0 (yy-pos yy)) (yythunkpos0 (yy-thunkpos yy)))
      (if (not (yyMatchChar yy $?)) (goto 45))
      (if (not (yy__- yy)) (goto 45))
      (return 1)
      (label 45)
      (set (yy-pos yy) yypos0) (set (yy-thunkpos yy) yythunkpos0)
      (return 0)
    )
  )
)

;; primary
(define yy_15_primary
  (lambda (yytext yyleng yy)
    (active i yy_1_rval yy_1_lval)
    (set (yy-result yy) (let ()  (set i [yyVariable withName: yytext rule: (yy-current yy)]) ))
  )
)
(define yy_16_primary
  (lambda (yytext yyleng yy)
    (active i yy_1_rval yy_1_lval)
    (set (yy-result yy) (let ()  [yyName withRule: (yy-findRule yy yytext) variable: i] ))
  )
)
(define yy_17_primary
  (lambda (yytext yyleng yy)
    (active i yy_1_rval yy_1_lval)
    (set (yy-result yy) (let ()  [yyName withRule: (yy-findRule yy yytext)] ))
  )
)
(define yy_18_primary
  (lambda (yytext yyleng yy)
    (active i yy_1_rval yy_1_lval)
    (set (yy-result yy) (let ()  [yyString withString: yytext] ))
  )
)
(define yy_19_primary
  (lambda (yytext yyleng yy)
    (active i yy_1_rval yy_1_lval)
    (set (yy-result yy) (let ()  [yyClass withString: yytext] ))
  )
)
(define yy_20_primary
  (lambda (yytext yyleng yy)
    (active i yy_1_rval yy_1_lval)
    (set (yy-result yy) (let ()  [yyDot new] ))
  )
)
(define yy_21_primary
  (lambda (yytext yyleng yy)
    (active i yy_1_rval yy_1_lval)
    (set (yy-result yy) (let ()  [yyAction withText: yytext rule: (yy-current yy)] ))
  )
)
(define yy_22_primary
  (lambda (yytext yyleng yy)
    (active i yy_1_rval yy_1_lval)
    (set (yy-result yy) (let ()  [yyPredicate withText: "(yyStart yy)"] ))
  )
)
(define yy_23_primary
  (lambda (yytext yyleng yy)
    (active i yy_1_rval yy_1_lval)
    (set (yy-result yy) (let ()  [yyPredicate withText: "(yyStop yy)"] ))
  )
)
(define yy__primary
  (lambda (yy)
    (let ((yypos0 (yy-pos yy)) (yythunkpos0 (yy-thunkpos yy)))
      (yyDo yy yyPush 4 0)
      (let ((yypos47 (yy-pos yy)) (yythunkpos47 (yy-thunkpos yy)))
        (if (not (yy__identifier yy)) (goto 48))
        (yyDo yy yySet -1 0)
        (yyDo yy yy_15_primary (yy-begin yy) (yy-end yy))
        (if (not (yy__COLON yy)) (goto 48))
        (if (not (yy__identifier yy)) (goto 48))
        (let ((yypos49 (yy-pos yy)) (yythunkpos49 (yy-thunkpos yy)))
          (if (not (yy__EQUAL yy)) (goto 49))
          (goto 48)
          (label 49)
          (set (yy-pos yy) yypos49) (set (yy-thunkpos yy) yythunkpos49)
        )
        (yyDo yy yy_16_primary (yy-begin yy) (yy-end yy))
        (goto 47)
        (label 48)
        (set (yy-pos yy) yypos47) (set (yy-thunkpos yy) yythunkpos47)
        (if (not (yy__identifier yy)) (goto 50))
        (let ((yypos51 (yy-pos yy)) (yythunkpos51 (yy-thunkpos yy)))
          (if (not (yy__EQUAL yy)) (goto 51))
          (goto 50)
          (label 51)
          (set (yy-pos yy) yypos51) (set (yy-thunkpos yy) yythunkpos51)
        )
        (yyDo yy yy_17_primary (yy-begin yy) (yy-end yy))
        (goto 47)
        (label 50)
        (set (yy-pos yy) yypos47) (set (yy-thunkpos yy) yythunkpos47)
        (if (not (yy__OPEN yy)) (goto 52))
        (if (not (yy__expression yy)) (goto 52))
        (if (not (yy__CLOSE yy)) (goto 52))
        (goto 47)
        (label 52)
        (set (yy-pos yy) yypos47) (set (yy-thunkpos yy) yythunkpos47)
        (if (not (yy__literal yy)) (goto 53))
        (yyDo yy yy_18_primary (yy-begin yy) (yy-end yy))
        (goto 47)
        (label 53)
        (set (yy-pos yy) yypos47) (set (yy-thunkpos yy) yythunkpos47)
        (if (not (yy__class yy)) (goto 54))
        (yyDo yy yy_19_primary (yy-begin yy) (yy-end yy))
        (goto 47)
        (label 54)
        (set (yy-pos yy) yypos47) (set (yy-thunkpos yy) yythunkpos47)
        (if (not (yy__DOT yy)) (goto 55))
        (yyDo yy yy_20_primary (yy-begin yy) (yy-end yy))
        (goto 47)
        (label 55)
        (set (yy-pos yy) yypos47) (set (yy-thunkpos yy) yythunkpos47)
        (if (not (yy__action yy)) (goto 56))
        (yyDo yy yy_21_primary (yy-begin yy) (yy-end yy))
        (goto 47)
        (label 56)
        (set (yy-pos yy) yypos47) (set (yy-thunkpos yy) yythunkpos47)
        (if (not (yy__BEGIN yy)) (goto 57))
        (yyDo yy yy_22_primary (yy-begin yy) (yy-end yy))
        (goto 47)
        (label 57)
        (set (yy-pos yy) yypos47) (set (yy-thunkpos yy) yythunkpos47)
        (if (not (yy__END yy)) (goto 46))
        (yyDo yy yy_23_primary (yy-begin yy) (yy-end yy))
      )
      (label 47)
      (yyDo yy yyPush -4 0)
      (return 1)
      (label 46)
      (set (yy-pos yy) yypos0) (set (yy-thunkpos yy) yythunkpos0)
      (yyDo yy yyPush -4 0)
      (return 0)
    )
  )
)

;; NOT
(define yy__NOT
  (lambda (yy)
    (let ((yypos0 (yy-pos yy)) (yythunkpos0 (yy-thunkpos yy)))
      (if (not (yyMatchChar yy $!)) (goto 58))
      (if (not (yy__- yy)) (goto 58))
      (return 1)
      (label 58)
      (set (yy-pos yy) yypos0) (set (yy-thunkpos yy) yythunkpos0)
      (return 0)
    )
  )
)

;; suffix
(define yy_12_suffix
  (lambda (yytext yyleng yy)
    (active p yy_1_rval yy_1_lval)
    (set (yy-result yy) (let ()  [yyQuery with: p] ))
  )
)
(define yy_13_suffix
  (lambda (yytext yyleng yy)
    (active p yy_1_rval yy_1_lval)
    (set (yy-result yy) (let ()  [yyStar  with: p] ))
  )
)
(define yy_14_suffix
  (lambda (yytext yyleng yy)
    (active p yy_1_rval yy_1_lval)
    (set (yy-result yy) (let ()  [yyPlus  with: p] ))
  )
)
(define yy__suffix
  (lambda (yy)
    (let ((yypos0 (yy-pos yy)) (yythunkpos0 (yy-thunkpos yy)))
      (yyDo yy yyPush 4 0)
      (if (not (yy__primary yy)) (goto 59))
      (yyDo yy yySet -1 0)
      (let ((yypos60 (yy-pos yy)) (yythunkpos60 (yy-thunkpos yy)))
        (let ((yypos62 (yy-pos yy)) (yythunkpos62 (yy-thunkpos yy)))
          (if (not (yy__QUESTION yy)) (goto 63))
          (yyDo yy yy_12_suffix (yy-begin yy) (yy-end yy))
          (goto 62)
          (label 63)
          (set (yy-pos yy) yypos62) (set (yy-thunkpos yy) yythunkpos62)
          (if (not (yy__STAR yy)) (goto 64))
          (yyDo yy yy_13_suffix (yy-begin yy) (yy-end yy))
          (goto 62)
          (label 64)
          (set (yy-pos yy) yypos62) (set (yy-thunkpos yy) yythunkpos62)
          (if (not (yy__PLUS yy)) (goto 60))
          (yyDo yy yy_14_suffix (yy-begin yy) (yy-end yy))
        )
        (label 62)
        (goto 61)
        (label 60)
        (set (yy-pos yy) yypos60) (set (yy-thunkpos yy) yythunkpos60)
      )
      (label 61)
      (yyDo yy yyPush -4 0)
      (return 1)
      (label 59)
      (set (yy-pos yy) yypos0) (set (yy-thunkpos yy) yythunkpos0)
      (yyDo yy yyPush -4 0)
      (return 0)
    )
  )
)

;; action
(define yy__action
  (lambda (yy)
    (let ((yypos0 (yy-pos yy)) (yythunkpos0 (yy-thunkpos yy)))
      (if (not (yyMatchChar yy ${)) (goto 65))
      (if (not (let ((yyleng (yy-makeText yy (yy-begin yy) (yy-end yy))) (yytext (yy-text yy))) (yyStart yy))) (goto 65))
      (label 66)
      (let ((yypos67 (yy-pos yy)) (yythunkpos67 (yy-thunkpos yy)))
        (let ((yypos68 (yy-pos yy)) (yythunkpos68 (yy-thunkpos yy)))
          (if (not (yyMatchChar yy $})) (goto 68))
          (goto 67)
          (label 68)
          (set (yy-pos yy) yypos68) (set (yy-thunkpos yy) yythunkpos68)
        )
        (if (not (yyMatchDot yy)) (goto 67))
        (goto 66)
        (label 67)
        (set (yy-pos yy) yypos67) (set (yy-thunkpos yy) yythunkpos67)
      )
      (if (not (let ((yyleng (yy-makeText yy (yy-begin yy) (yy-end yy))) (yytext (yy-text yy))) (yyStop yy))) (goto 65))
      (if (not (yyMatchChar yy $})) (goto 65))
      (if (not (yy__- yy)) (goto 65))
      (return 1)
      (label 65)
      (set (yy-pos yy) yypos0) (set (yy-thunkpos yy) yythunkpos0)
      (return 0)
    )
  )
)

;; AND
(define yy__AND
  (lambda (yy)
    (let ((yypos0 (yy-pos yy)) (yythunkpos0 (yy-thunkpos yy)))
      (if (not (yyMatchChar yy $&)) (goto 69))
      (if (not (yy__- yy)) (goto 69))
      (return 1)
      (label 69)
      (set (yy-pos yy) yypos0) (set (yy-thunkpos yy) yythunkpos0)
      (return 0)
    )
  )
)

;; prefix
(define yy_9_prefix
  (lambda (yytext yyleng yy)
    (active s yy_1_rval yy_1_lval)
    (set (yy-result yy) (let ()  [yyPredicate withText: yytext] ))
  )
)
(define yy_10_prefix
  (lambda (yytext yyleng yy)
    (active s yy_1_rval yy_1_lval)
    (set (yy-result yy) (let ()  [yyPeekFor with: s] ))
  )
)
(define yy_11_prefix
  (lambda (yytext yyleng yy)
    (active s yy_1_rval yy_1_lval)
    (set (yy-result yy) (let ()  [yyPeekNot with: s] ))
  )
)
(define yy__prefix
  (lambda (yy)
    (let ((yypos0 (yy-pos yy)) (yythunkpos0 (yy-thunkpos yy)))
      (yyDo yy yyPush 4 0)
      (let ((yypos71 (yy-pos yy)) (yythunkpos71 (yy-thunkpos yy)))
        (if (not (yy__AND yy)) (goto 72))
        (if (not (yy__action yy)) (goto 72))
        (yyDo yy yy_9_prefix (yy-begin yy) (yy-end yy))
        (goto 71)
        (label 72)
        (set (yy-pos yy) yypos71) (set (yy-thunkpos yy) yythunkpos71)
        (if (not (yy__AND yy)) (goto 73))
        (if (not (yy__suffix yy)) (goto 73))
        (yyDo yy yySet -1 0)
        (yyDo yy yy_10_prefix (yy-begin yy) (yy-end yy))
        (goto 71)
        (label 73)
        (set (yy-pos yy) yypos71) (set (yy-thunkpos yy) yythunkpos71)
        (if (not (yy__NOT yy)) (goto 74))
        (if (not (yy__suffix yy)) (goto 74))
        (yyDo yy yySet -1 0)
        (yyDo yy yy_11_prefix (yy-begin yy) (yy-end yy))
        (goto 71)
        (label 74)
        (set (yy-pos yy) yypos71) (set (yy-thunkpos yy) yythunkpos71)
        (if (not (yy__suffix yy)) (goto 70))
      )
      (label 71)
      (yyDo yy yyPush -4 0)
      (return 1)
      (label 70)
      (set (yy-pos yy) yypos0) (set (yy-thunkpos yy) yythunkpos0)
      (yyDo yy yyPush -4 0)
      (return 0)
    )
  )
)

;; BAR
(define yy__BAR
  (lambda (yy)
    (let ((yypos0 (yy-pos yy)) (yythunkpos0 (yy-thunkpos yy)))
      (if (not (yyMatchChar yy $|)) (goto 75))
      (if (not (yy__- yy)) (goto 75))
      (return 1)
      (label 75)
      (set (yy-pos yy) yypos0) (set (yy-thunkpos yy) yythunkpos0)
      (return 0)
    )
  )
)

;; sequence
(define yy_7_sequence
  (lambda (yytext yyleng yy)
    (active q yy_2_rval yy_2_lval)
    (active p yy_1_rval yy_1_lval)
    (set (yy-result yy) (let ()  (set p [p appendSequence: q]) ))
  )
)
(define yy_8_sequence
  (lambda (yytext yyleng yy)
    (active q yy_2_rval yy_2_lval)
    (active p yy_1_rval yy_1_lval)
    (set (yy-result yy) (let ()  p ))
  )
)
(define yy__sequence
  (lambda (yy)
    (let ((yypos0 (yy-pos yy)) (yythunkpos0 (yy-thunkpos yy)))
      (yyDo yy yyPush 8 0)
      (if (not (yy__prefix yy)) (goto 76))
      (yyDo yy yySet -1 0)
      (label 77)
      (let ((yypos78 (yy-pos yy)) (yythunkpos78 (yy-thunkpos yy)))
        (if (not (yy__prefix yy)) (goto 78))
        (yyDo yy yySet -2 0)
        (yyDo yy yy_7_sequence (yy-begin yy) (yy-end yy))
        (goto 77)
        (label 78)
        (set (yy-pos yy) yypos78) (set (yy-thunkpos yy) yythunkpos78)
      )
      (yyDo yy yy_8_sequence (yy-begin yy) (yy-end yy))
      (yyDo yy yyPush -8 0)
      (return 1)
      (label 76)
      (set (yy-pos yy) yypos0) (set (yy-thunkpos yy) yythunkpos0)
      (yyDo yy yyPush -8 0)
      (return 0)
    )
  )
)

;; SEMICOLON
(define yy__SEMICOLON
  (lambda (yy)
    (let ((yypos0 (yy-pos yy)) (yythunkpos0 (yy-thunkpos yy)))
      (if (not (yyMatchChar yy $;)) (goto 79))
      (if (not (yy__- yy)) (goto 79))
      (return 1)
      (label 79)
      (set (yy-pos yy) yypos0) (set (yy-thunkpos yy) yythunkpos0)
      (return 0)
    )
  )
)

;; expression
(define yy_5_expression
  (lambda (yytext yyleng yy)
    (active t yy_2_rval yy_2_lval)
    (active s yy_1_rval yy_1_lval)
    (set (yy-result yy) (let ()  (set s [s appendAlternate: t]) ))
  )
)
(define yy_6_expression
  (lambda (yytext yyleng yy)
    (active t yy_2_rval yy_2_lval)
    (active s yy_1_rval yy_1_lval)
    (set (yy-result yy) (let ()  s ))
  )
)
(define yy__expression
  (lambda (yy)
    (let ((yypos0 (yy-pos yy)) (yythunkpos0 (yy-thunkpos yy)))
      (yyDo yy yyPush 8 0)
      (if (not (yy__sequence yy)) (goto 80))
      (yyDo yy yySet -1 0)
      (label 81)
      (let ((yypos82 (yy-pos yy)) (yythunkpos82 (yy-thunkpos yy)))
        (if (not (yy__BAR yy)) (goto 82))
        (if (not (yy__sequence yy)) (goto 82))
        (yyDo yy yySet -2 0)
        (yyDo yy yy_5_expression (yy-begin yy) (yy-end yy))
        (goto 81)
        (label 82)
        (set (yy-pos yy) yypos82) (set (yy-thunkpos yy) yythunkpos82)
      )
      (yyDo yy yy_6_expression (yy-begin yy) (yy-end yy))
      (yyDo yy yyPush -8 0)
      (return 1)
      (label 80)
      (set (yy-pos yy) yypos0) (set (yy-thunkpos yy) yythunkpos0)
      (yyDo yy yyPush -8 0)
      (return 0)
    )
  )
)

;; EQUAL
(define yy__EQUAL
  (lambda (yy)
    (let ((yypos0 (yy-pos yy)) (yythunkpos0 (yy-thunkpos yy)))
      (if (not (yyMatchChar yy $=)) (goto 83))
      (if (not (yy__- yy)) (goto 83))
      (return 1)
      (label 83)
      (set (yy-pos yy) yypos0) (set (yy-thunkpos yy) yythunkpos0)
      (return 0)
    )
  )
)

;; identifier
(define yy__identifier
  (lambda (yy)
    (let ((yypos0 (yy-pos yy)) (yythunkpos0 (yy-thunkpos yy)))
      (if (not (let ((yyleng (yy-makeText yy (yy-begin yy) (yy-end yy))) (yytext (yy-text yy))) (yyStart yy))) (goto 84))
      (if (not (yyMatchClass yy "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\1\0\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0")) (goto 84))
      (label 85)
      (let ((yypos86 (yy-pos yy)) (yythunkpos86 (yy-thunkpos yy)))
        (if (not (yyMatchClass yy "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\1\0\0\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\1\0\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0")) (goto 86))
        (goto 85)
        (label 86)
        (set (yy-pos yy) yypos86) (set (yy-thunkpos yy) yythunkpos86)
      )
      (if (not (let ((yyleng (yy-makeText yy (yy-begin yy) (yy-end yy))) (yytext (yy-text yy))) (yyStop yy))) (goto 84))
      (if (not (yy__- yy)) (goto 84))
      (return 1)
      (label 84)
      (set (yy-pos yy) yypos0) (set (yy-thunkpos yy) yythunkpos0)
      (return 0)
    )
  )
)

;; definition
(define yy_1_definition
  (lambda (yytext yyleng yy)
    (active e yy_1_rval yy_1_lval)
    (set (yy-result yy) (let ()  (set (yy-current yy) (yy-findRule yy yytext)) ))
  )
)
(define yy_2_definition
  (lambda (yytext yyleng yy)
    (active e yy_1_rval yy_1_lval)
    (set (yy-result yy) (let ()  [(yy-current yy) setExpression: e] ))
  )
)
(define yy_3_definition
  (lambda (yytext yyleng yy)
    (active e yy_1_rval yy_1_lval)
    (set (yy-result yy) (let ()  (yy-addHeader yy yytext) ))
  )
)
(define yy_4_definition
  (lambda (yytext yyleng yy)
    (active e yy_1_rval yy_1_lval)
    (set (yy-result yy) (let ()  (yy-addFooter yy yytext) ))
  )
)
(define yy__definition
  (lambda (yy)
    (let ((yypos0 (yy-pos yy)) (yythunkpos0 (yy-thunkpos yy)))
      (yyDo yy yyPush 4 0)
      (let ((yypos88 (yy-pos yy)) (yythunkpos88 (yy-thunkpos yy)))
        (if (not (yy__identifier yy)) (goto 89))
        (yyDo yy yy_1_definition (yy-begin yy) (yy-end yy))
        (if (not (yy__EQUAL yy)) (goto 89))
        (if (not (yy__expression yy)) (goto 89))
        (yyDo yy yySet -1 0)
        (yyDo yy yy_2_definition (yy-begin yy) (yy-end yy))
        (let ((yypos90 (yy-pos yy)) (yythunkpos90 (yy-thunkpos yy)))
          (if (not (yy__SEMICOLON yy)) (goto 90))
          (goto 91)
          (label 90)
          (set (yy-pos yy) yypos90) (set (yy-thunkpos yy) yythunkpos90)
        )
        (label 91)
        (goto 88)
        (label 89)
        (set (yy-pos yy) yypos88) (set (yy-thunkpos yy) yythunkpos88)
        (if (not (yyMatchString yy "%{")) (goto 92))
        (if (not (let ((yyleng (yy-makeText yy (yy-begin yy) (yy-end yy))) (yytext (yy-text yy))) (yyStart yy))) (goto 92))
        (label 93)
        (let ((yypos94 (yy-pos yy)) (yythunkpos94 (yy-thunkpos yy)))
          (let ((yypos95 (yy-pos yy)) (yythunkpos95 (yy-thunkpos yy)))
            (if (not (yyMatchString yy "%}")) (goto 95))
            (goto 94)
            (label 95)
            (set (yy-pos yy) yypos95) (set (yy-thunkpos yy) yythunkpos95)
          )
          (if (not (yyMatchDot yy)) (goto 94))
          (goto 93)
          (label 94)
          (set (yy-pos yy) yypos94) (set (yy-thunkpos yy) yythunkpos94)
        )
        (if (not (let ((yyleng (yy-makeText yy (yy-begin yy) (yy-end yy))) (yytext (yy-text yy))) (yyStop yy))) (goto 92))
        (if (not (yyMatchString yy "%}")) (goto 92))
        (yyDo yy yy_3_definition (yy-begin yy) (yy-end yy))
        (goto 88)
        (label 92)
        (set (yy-pos yy) yypos88) (set (yy-thunkpos yy) yythunkpos88)
        (if (not (yyMatchString yy "%%")) (goto 87))
        (if (not (let ((yyleng (yy-makeText yy (yy-begin yy) (yy-end yy))) (yytext (yy-text yy))) (yyStart yy))) (goto 87))
        (label 96)
        (let ((yypos97 (yy-pos yy)) (yythunkpos97 (yy-thunkpos yy)))
          (if (not (yyMatchDot yy)) (goto 97))
          (goto 96)
          (label 97)
          (set (yy-pos yy) yypos97) (set (yy-thunkpos yy) yythunkpos97)
        )
        (if (not (let ((yyleng (yy-makeText yy (yy-begin yy) (yy-end yy))) (yytext (yy-text yy))) (yyStop yy))) (goto 87))
        (yyDo yy yy_4_definition (yy-begin yy) (yy-end yy))
      )
      (label 88)
      (yyDo yy yyPush -4 0)
      (return 1)
      (label 87)
      (set (yy-pos yy) yypos0) (set (yy-thunkpos yy) yythunkpos0)
      (yyDo yy yyPush -4 0)
      (return 0)
    )
  )
)

;; -
(define yy__-
  (lambda (yy)
    (label 99)
    (let ((yypos100 (yy-pos yy)) (yythunkpos100 (yy-thunkpos yy)))
      (let ((yypos101 (yy-pos yy)) (yythunkpos101 (yy-thunkpos yy)))
        (if (not (yy__space yy)) (goto 102))
        (goto 101)
        (label 102)
        (set (yy-pos yy) yypos101) (set (yy-thunkpos yy) yythunkpos101)
        (if (not (yy__comment yy)) (goto 100))
      )
      (label 101)
      (goto 99)
      (label 100)
      (set (yy-pos yy) yypos100) (set (yy-thunkpos yy) yythunkpos100)
    )
    (return 1)
  )
)

;; grammar
(define yy__grammar
  (lambda (yy)
    (let ((yypos0 (yy-pos yy)) (yythunkpos0 (yy-thunkpos yy)))
      (if (not (yy__- yy)) (goto 103))
      (if (not (yy__definition yy)) (goto 103))
      (return 1)
      (label 103)
      (set (yy-pos yy) yypos0) (set (yy-thunkpos yy) yythunkpos0)
      (return 0)
    )
  )
)

(define yy-parse-from
  (lambda (yy rule)
    (yy-reset yy)
    (let ((yyok (rule yy)))
      (and yyok (yyDone yy))
      (yyCommit yy)
      yyok)))

(define yy-parse
  (lambda (yy)
    (yy-parse-from yy yy__grammar)))



(require 'yy-compile)

(define compile-peg
  (lambda (stream output)
    (let ((yy (yy-new stream)))
      (while (yy-parse yy)
	(or (yy-start yy) (set (yy-start yy) (yy-current yy))))
      (printf "%d rules\n" (length (yy-rules yy)))
      (yy-compile yy output)
      (printf "parser written on %s\n" output))))

(let ((files  [OrderedCollection new])
      (argv   [OS arguments])
      (output 0))
  (let ((arg 0))
    (while (and [argv notEmpty]
		[(set arg [argv removeFirst]) ~= '"--"])
      (if (and [arg = '"-o"] [argv notEmpty])
	  (set output [argv removeFirst])
	  (let ((file [File open: arg])
		(stream [file readStream]))
	    (or output (set output [arg , '".k"]))
	    (compile-peg stream [output _stringValue])
	    (set output 0))))))

